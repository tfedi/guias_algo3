T:           r
            / \
           v1 v2
          / \ / \
        w1 w2 w3 w4
        /\ /\ /\ /\
       v3 v4 ....

a)  longitud del ciclo = #aristas de v hasta r + #aristas de w hasta r + 1 (arista nueva)
    como v y w pertenecen a V o a W, entonces la cantidad de aristas de ambas hasta la raiz
    es o bien par o impar, y la suma de dos numeros de misma paridad es siempre par.

b)  Como ahora estamos viendo aristas que unen a un vertice de V con uno de W, resulta que
    la cantidad de aristas hasta la raiz de cada vertice tiene diferente paridad, por ende
    la longitud del ciclo es par.

    Luego, si toda arista de G cumple esto => todos los ciclos de G son de longitud par
    => es bipartito, pues no tiene ciclos de longitud impar.

c)  Implementamos LISTA como una cola para que recorra a lo ancho. Tenemos dos buckets
    V y W para almacenar los nodos que están a distancia impar y par de la raiz respectivamente.

    nivelActual = 1;
    biparticion = [[],[]];
    visitados = []
    mientras LISTA != ∅ hacer
        elegir un nodo i de LISTA
        si existe un arco (i, j) tal que j !∈ LISTA entonces
            (marcar vértice j)
            pred[j] ← i
            next ← next + 1
            orden[j] ← next
            LISTA ← LISTA ∪ {j}
            biparticion[nivelActual%2].add(j);
            visitados.add(<j,nivelActual%2>);
        sino
            si i ∈ visitados y existe un arco (i, j) tal que j ∈ visitados y son del mismo nivel.
                retornar (i,j)
            si no
                LISTA ← LISTA \ {i}
                nivelActual++
        fin si
    fin mientras
    retornar biparticion

d)  nivelActual = 1;
    biparticion = [[],[]];
    visitados = []
    mientras LISTA != ∅ hacer
        elegir un nodo i de LISTA
        si existe un arco (i, j) tal que j !∈ LISTA entonces
            (marcar vértice j)
            pred[j] ← i
            next ← next + 1
            orden[j] ← next
            LISTA ← LISTA ∪ {j}
            biparticion[nivelActual%2].add(j);
            visitados.add(<j,nivelActual%2>);
        sino
            si i ∈ visitados y existe un arco (i, j) tal que j ∈ visitados y son del mismo nivel.
                retornar (i,j)
            si no
                LISTA ← LISTA \ {i}
                nivelActual++
        fin si
    fin mientras
    si existe nodo i tal que i ∈ G y i !∈ visitados
        LISTA ← LISTA ∪ {i}
        ir a mientras
    retornar biparticion